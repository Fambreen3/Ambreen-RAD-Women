public with sharing class WeekSixHomework {
    // Remember Sets & Maps??  We did a little practice with Lists in week 2, but we need to make sure we know how to use Sets & Maps as well!!
    
    public static void setsReview(){
        
        //Your assignment: Play with Sets!
        
        // 1.  Create a set of Strings and add at least 5 entries
        Set<String> BagsBrands = new Set<String>();
        
        //Why a set instead of a list?  Usually because we need each entry in the collection to be unique.
        //Perhaps we're creating a list of cuisines and it's possible we'll encounter the same one twice, but we don't want it to appear twice
        
        BagsBrands.add('Nine West');
        BagsBrands.add('Michael Kors');
        BagsBrands.add('Coach');
        BagsBrands.add('Aldo');
        BagsBrands.add('Kate Spade');
        
        //Use System.debug to print out the size of your set
        System.debug('Bags brands are ' + BagsBrands.size());
        
        //Add an item to your set that already exists
        BagsBrands.add('Aldo');
        
        //Use System.debug to print out the size again,  they should be the same!
        System.debug('Bags brands are ' + BagsBrands.size());
        
        
        // 2.  Bonus Points!  Check out the documentation on Sets. Go to the section titled Set Methods. Pick one of the methods to try out and print the results to the debug log.  
        // Documentation: https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_methods_system_set.htm
        //Hint:  can you print out a boolean that indicates if the set is empty?  Can you clone it?
        
        
        Set<String> NewCopy = BagsBrands.clone();
        System.debug('New brands' + NewCopy);
        
        Boolean setEmpty = BagsBrands.isEmpty();
        System.debug('Is BagsBrands  ' + setEmpty);
    }

    public static void mapsReview() {

        //Time to get creative!  

        // 1. Create a new Map.  You can use whatever primitives/object types you like, as long as they make sense.
        // Try to add at least 5 Key/value pairs.

        //Ambreen Code
        
        Map<Integer, String> SchoolsById = new Map<Integer, String>();

        //Let's add some entries in the format of: map.put(key, value)
        SchoolsById.put(1234, 'Lincoln Elementary School');
        SchoolsById.put(8438, 'Thomas Jefferson Middle School');
        SchoolsById.put(6784, 'Madera South High School');
        SchoolsById.put(48929, 'John Adam Elementary School');
        SchoolsById.put(89453, 'Oklahoma Elemenary School');

        //Now, in the debug log, print out  a list of the values.
     System.debug('The Schools names are ' + SchoolsById);

        //Can you print out a set of the Keys?
       // Yes !
    System.debug('The Schools names ids are ' + SchoolsById.keyset());

        // 2. Bonus!  Check out the documentation on Maps. Go to the section titled Map Methods.  Manipulate the Map using one of the methods defined in the documentation
        // Documentation: https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_methods_system_map.htm
        // Hint: Can you remove an entry using the key?  Can you clear out the map without deleting it?
        
        String RemoveOKC = SchoolsById.remove(89453);
        System.debug('Removed School Key ' + RemoveOKC);
        System.debug('The Schools names ids are ' + SchoolsById.keyset());
    }

    public static void listsReview() {

        // 1. Create a list of Strings.  Add at least 5 entries to the list, all in one line
             List<String> shoes = new List<String>();
             Shoes.add('Pumps');
             Shoes.add('Sneakers');
             Shoes.add('High Heel');
             Shoes.add('Nike');
             Shoes.add('Jones NewYork');

        // 2. Create a second list of Strings and add 5 or more entries to this list.

             List<String> colors =new List<String>();
             colors.add('Black');
             colors.add('White');
             colors.add('Blue');
             colors.add('Green');
             colors.add('Red');
      
        //3.  Bonus! Using the documentation on standard List methods from Salesforce, add the items from your first list, to your second list with one command
        // Documentation: https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_methods_system_list.htm
          

        //4.  Can you now loop through your combined list and print it to the debug log?  (Hint:  Check the documentation!)
               Shoes.addAll(colors);
        
               System.debug('Combined List is ' + Shoes);
    }
        
}
